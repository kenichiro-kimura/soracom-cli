// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdDeviceId holds value of 'device_id' option
var SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdDeviceId string

// SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdState holds value of 'state' option
var SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdState string

// SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody holds contents of request body to be sent
var SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody string

func InitSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd() {
	SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd.Flags().StringVar(&SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdDeviceId, "device-id", "", TRAPI("Device ID of the target compatible camera device."))

	SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd.Flags().StringVar(&SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdState, "state", "", TRAPI("Display settings for motion tagging.- 'on'- 'off'"))

	SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd.Flags().StringVar(&SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd.RunE = SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdRunE

	SoraCamDevicesAtomcamSettingsCmd.AddCommand(SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd)
}

// SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd defines 'set-motion-tagging' subcommand
var SoraCamDevicesAtomcamSettingsSetMotionTaggingCmd = &cobra.Command{
	Use:   "set-motion-tagging",
	Short: TRAPI("/sora_cam/devices/{device_id}/atomcam/settings/motion_tagging:post:summary"),
	Long:  TRAPI(`/sora_cam/devices/{device_id}/atomcam/settings/motion_tagging:post:description`) + "\n\n" + createLinkToAPIReference("SoraCam", "setSoraCamDeviceAtomCamSettingsMotionTagging"),
}

func SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraCamDevicesAtomcamSettingsSetMotionTaggingCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraCamDevicesAtomcamSettingsSetMotionTaggingCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd("/sora_cam/devices/{device_id}/atomcam/settings/motion_tagging"),
		query:       buildQueryForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd(path string) string {

	escapedDeviceId := url.PathEscape(SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSoraCamDevicesAtomcamSettingsSetMotionTaggingCmd() (string, error) {
	var result map[string]interface{}

	if SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody, "@") {
			fname := strings.TrimPrefix(SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdState != "" {
		result["state"] = SoraCamDevicesAtomcamSettingsSetMotionTaggingCmdState
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
