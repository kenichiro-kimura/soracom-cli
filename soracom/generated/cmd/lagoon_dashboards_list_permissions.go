// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LagoonDashboardsListPermissionsCmdV2 holds value of 'v2' option
var LagoonDashboardsListPermissionsCmdV2 bool

// LagoonDashboardsListPermissionsCmdOutputJSONL indicates to output with jsonl format
var LagoonDashboardsListPermissionsCmdOutputJSONL bool

func InitLagoonDashboardsListPermissionsCmd() {
	LagoonDashboardsListPermissionsCmd.Flags().BoolVar(&LagoonDashboardsListPermissionsCmdV2, "v2", false, TRAPI("If the value is true, a request will be issued to Lagoon 2. This is only valid if both Lagoon 3 and Lagoon 2 are enabled."))

	LagoonDashboardsListPermissionsCmd.Flags().BoolVar(&LagoonDashboardsListPermissionsCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	LagoonDashboardsListPermissionsCmd.RunE = LagoonDashboardsListPermissionsCmdRunE

	LagoonDashboardsCmd.AddCommand(LagoonDashboardsListPermissionsCmd)
}

// LagoonDashboardsListPermissionsCmd defines 'list-permissions' subcommand
var LagoonDashboardsListPermissionsCmd = &cobra.Command{
	Use:   "list-permissions",
	Short: TRAPI("/lagoon/dashboards/permissions:get:summary"),
	Long:  TRAPI(`/lagoon/dashboards/permissions:get:description`) + "\n\n" + createLinkToAPIReference("Lagoon", "listLagoonDashboardsPermissions"),
}

func LagoonDashboardsListPermissionsCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := authHelper(ac, cmd, args)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLagoonDashboardsListPermissionsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if LagoonDashboardsListPermissionsCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLagoonDashboardsListPermissionsCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForLagoonDashboardsListPermissionsCmd("/lagoon/dashboards/permissions"),
		query:  buildQueryForLagoonDashboardsListPermissionsCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLagoonDashboardsListPermissionsCmd(path string) string {

	return path
}

func buildQueryForLagoonDashboardsListPermissionsCmd() url.Values {
	result := url.Values{}

	if LagoonDashboardsListPermissionsCmdV2 != false {
		result.Add("v2", sprintf("%t", LagoonDashboardsListPermissionsCmdV2))
	}

	return result
}
