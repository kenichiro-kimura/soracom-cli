// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// StatsFunnelGetCmdImsi holds value of 'imsi' option
var StatsFunnelGetCmdImsi string

// StatsFunnelGetCmdPeriod holds value of 'period' option
var StatsFunnelGetCmdPeriod string

// StatsFunnelGetCmdFrom holds value of 'from' option
var StatsFunnelGetCmdFrom int64

// StatsFunnelGetCmdTo holds value of 'to' option
var StatsFunnelGetCmdTo int64

// StatsFunnelGetCmdOutputJSONL indicates to output with jsonl format
var StatsFunnelGetCmdOutputJSONL bool

func init() {
	StatsFunnelGetCmd.Flags().StringVar(&StatsFunnelGetCmdImsi, "imsi", "", TRAPI("imsi"))

	StatsFunnelGetCmd.Flags().StringVar(&StatsFunnelGetCmdPeriod, "period", "", TRAPI("Unit of aggregation. minutes outputs the usage report at the finest granularity. However, while the device is connected to the Soracom platform, the amount of usage will be recorded at approximately 5-minute intervals."))

	StatsFunnelGetCmd.Flags().Int64Var(&StatsFunnelGetCmdFrom, "from", 0, TRAPI("Start time for the aggregate data (UNIX time in seconds)."))

	StatsFunnelGetCmd.Flags().Int64Var(&StatsFunnelGetCmdTo, "to", 0, TRAPI("End time for the aggregate data (UNIX time in seconds)."))

	StatsFunnelGetCmd.Flags().BoolVar(&StatsFunnelGetCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))
	StatsFunnelCmd.AddCommand(StatsFunnelGetCmd)
}

// StatsFunnelGetCmd defines 'get' subcommand
var StatsFunnelGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/stats/funnel/subscribers/{imsi}:get:summary"),
	Long:  TRAPI(`/stats/funnel/subscribers/{imsi}:get:description`) + "\n\n" + createLinkToAPIReference("Stats", "getFunnelStats"),
	RunE: func(cmd *cobra.Command, args []string) error {

		if len(args) > 0 {
			return fmt.Errorf("unexpected arguments passed => %v", args)
		}

		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectStatsFunnelGetCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			if StatsFunnelGetCmdOutputJSONL {
				return printStringAsJSONL(body)
			}

			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectStatsFunnelGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("imsi", "imsi", "path", parsedBody, StatsFunnelGetCmdImsi)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("period", "period", "query", parsedBody, StatsFunnelGetCmdPeriod)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("from", "from", "query", parsedBody, StatsFunnelGetCmdFrom)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("to", "to", "query", parsedBody, StatsFunnelGetCmdTo)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForStatsFunnelGetCmd("/stats/funnel/subscribers/{imsi}"),
		query:  buildQueryForStatsFunnelGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsFunnelGetCmd(path string) string {

	escapedImsi := url.PathEscape(StatsFunnelGetCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	return path
}

func buildQueryForStatsFunnelGetCmd() url.Values {
	result := url.Values{}

	if StatsFunnelGetCmdPeriod != "" {
		result.Add("period", StatsFunnelGetCmdPeriod)
	}

	if StatsFunnelGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", StatsFunnelGetCmdFrom))
	}

	if StatsFunnelGetCmdTo != 0 {
		result.Add("to", sprintf("%d", StatsFunnelGetCmdTo))
	}

	return result
}
