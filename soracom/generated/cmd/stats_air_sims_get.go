// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// StatsAirSimsGetCmdPeriod holds value of 'period' option
var StatsAirSimsGetCmdPeriod string

// StatsAirSimsGetCmdSimId holds value of 'sim_id' option
var StatsAirSimsGetCmdSimId string

// StatsAirSimsGetCmdFrom holds value of 'from' option
var StatsAirSimsGetCmdFrom int64

// StatsAirSimsGetCmdTo holds value of 'to' option
var StatsAirSimsGetCmdTo int64

// StatsAirSimsGetCmdOutputJSONL indicates to output with jsonl format
var StatsAirSimsGetCmdOutputJSONL bool

func init() {
	StatsAirSimsGetCmd.Flags().StringVar(&StatsAirSimsGetCmdPeriod, "period", "", TRAPI("Unit of aggregation. minutes outputs the history of traffic at the finest granularity. However, while the device is connected to the Soracom platform, the communication volume is recorded at approximately 5-minute intervals."))

	StatsAirSimsGetCmd.Flags().StringVar(&StatsAirSimsGetCmdSimId, "sim-id", "", TRAPI("SIM ID"))

	StatsAirSimsGetCmd.Flags().Int64Var(&StatsAirSimsGetCmdFrom, "from", 0, TRAPI("Start time for the aggregate data (UNIX time in seconds)."))

	StatsAirSimsGetCmd.Flags().Int64Var(&StatsAirSimsGetCmdTo, "to", 0, TRAPI("End time for the aggregate data (UNIX time in seconds)."))

	StatsAirSimsGetCmd.Flags().BoolVar(&StatsAirSimsGetCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))
	StatsAirSimsCmd.AddCommand(StatsAirSimsGetCmd)
}

// StatsAirSimsGetCmd defines 'get' subcommand
var StatsAirSimsGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/stats/air/sims/{sim_id}:get:summary"),
	Long:  TRAPI(`/stats/air/sims/{sim_id}:get:description`) + "\n\n" + createLinkToAPIReference("Stats", "getAirStatsOfSim"),
	RunE: func(cmd *cobra.Command, args []string) error {

		if len(args) > 0 {
			return fmt.Errorf("unexpected arguments passed => %v", args)
		}

		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectStatsAirSimsGetCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			if StatsAirSimsGetCmdOutputJSONL {
				return printStringAsJSONL(body)
			}

			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectStatsAirSimsGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("period", "period", "query", parsedBody, StatsAirSimsGetCmdPeriod)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, StatsAirSimsGetCmdSimId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("from", "from", "query", parsedBody, StatsAirSimsGetCmdFrom)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("to", "to", "query", parsedBody, StatsAirSimsGetCmdTo)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForStatsAirSimsGetCmd("/stats/air/sims/{sim_id}"),
		query:  buildQueryForStatsAirSimsGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsAirSimsGetCmd(path string) string {

	escapedSimId := url.PathEscape(StatsAirSimsGetCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForStatsAirSimsGetCmd() url.Values {
	result := url.Values{}

	if StatsAirSimsGetCmdPeriod != "" {
		result.Add("period", StatsAirSimsGetCmdPeriod)
	}

	if StatsAirSimsGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", StatsAirSimsGetCmdFrom))
	}

	if StatsAirSimsGetCmdTo != 0 {
		result.Add("to", sprintf("%d", StatsAirSimsGetCmdTo))
	}

	return result
}
